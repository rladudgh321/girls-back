// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  role         String        @default("USER")
  refreshToken RefreshToken?
}

model RefreshToken {
  id             String @id @default(uuid())
  token          String @unique
  user           User   @relation(fields: [refreshTokenId], references: [id])
  refreshTokenId String @unique
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique()
  postTags PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model Post {
  id        String    @id @default(uuid()) // id는 String으로 유지
  title     String
  content1  String?
  content2  String?
  content3  String
  createdAt DateTime  @default(now())
  postTags  PostTag[]
  images1   Image1[]
  images2   Image2[]
  images3   Image3[]
}

model Image1 {
  id     String @id @default(uuid())
  src    String
  postId String // postId는 String으로 변경
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Image2 {
  id     String @id @default(uuid())
  src    String
  postId String // postId는 String으로 변경
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Image3 {
  id     String @id @default(uuid())
  src    String
  postId String // postId는 String으로 변경
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}
